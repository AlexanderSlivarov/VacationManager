// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VacationManager.Data;

#nullable disable

namespace VacationManager.Data.Migrations
{
    [DbContext(typeof(VacationManagerDbContext))]
    [Migration("20240411201032_Dsa")]
    partial class Dsa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VacationManager.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "17c8ccc5-9e33-4f37-9bb1-be88bbfb7d6b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07241867-8b46-4f8b-a927-945d9f00cfa1",
                            EmailConfirmed = false,
                            FirstName = "Sasho",
                            LastName = "Manekena",
                            LockoutEnabled = false,
                            NormalizedUserName = "CEO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAuEP9t5oooV/ovJt2W/xCpZGHfE3h/hg1C2Gk8XoZL9kUwv6MvYAJ48bb8c4fY8Zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efda07fd-abdd-4f2a-9b57-86e5d47ddad6",
                            TeamName = "ceotata",
                            TwoFactorEnabled = false,
                            UserName = "ceo@gmail.com"
                        },
                        new
                        {
                            Id = "55a40151-ee78-40ac-8fc1-79c3e0816ade",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f75a10d6-2f65-4c99-b9c9-cf0e1129ba16",
                            EmailConfirmed = false,
                            FirstName = "Marin",
                            LastName = "Pingvin",
                            LockoutEnabled = false,
                            NormalizedUserName = "DEVELOPER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEICcjzD4MoHJGZqvBK7lkmfoqVGHDNINU6SHhhp7NvUYPkfA4/K2IkFSQkifoiWR/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b19f5023-beff-4f2a-bdb0-83df5f65da61",
                            TeamName = "Developerite",
                            TwoFactorEnabled = false,
                            UserName = "developer@gmail.com"
                        },
                        new
                        {
                            Id = "a481ea6a-3ac1-4be7-a131-285be0bfc748",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e804073d-f966-4280-ba60-b31f58c111d9",
                            EmailConfirmed = false,
                            FirstName = "Steven",
                            LastName = "Rodgrigez",
                            LockoutEnabled = false,
                            NormalizedUserName = "TEAMLEAD@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ/NY3wlVAusI6ODiUjKGU3o3KNy+zB1FipJFQFvqk3wlmrnDB1V/A+J8aZF/ejA8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "866dff19-5805-477a-9094-2e63bbb8b091",
                            TeamName = "Leaderite",
                            TwoFactorEnabled = false,
                            UserName = "teamlead@gmail.com"
                        },
                        new
                        {
                            Id = "3fdeb990-62d4-41e7-90fc-fa213e9e6109",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "521194cb-8c5f-457c-96e6-fbe0fdd1ccce",
                            EmailConfirmed = false,
                            FirstName = "Jordan",
                            LastName = "Fugata",
                            LockoutEnabled = false,
                            NormalizedUserName = "UNASSIGNED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP+bVkS6xF0+oNKxoggi/kBd2704KwdonyMkQvOWJNPHvbvLQe6RcbmkBrbderecNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24936082-b377-434b-90ae-6894f50c1b78",
                            TeamName = "Randomite",
                            TwoFactorEnabled = false,
                            UserName = "unassigned@gmail.com"
                        });
                });

            modelBuilder.Entity("VacationManager.Data.Models.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HalfDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantId = "3fdeb990-62d4-41e7-90fc-fa213e9e6109",
                            Approved = true,
                            CreationDate = new DateTime(2024, 4, 11, 23, 10, 32, 317, DateTimeKind.Local).AddTicks(8652),
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HalfDay = true
                        },
                        new
                        {
                            Id = 2,
                            ApplicantId = "3fdeb990-62d4-41e7-90fc-fa213e9e6109",
                            Approved = true,
                            CreationDate = new DateTime(2024, 4, 11, 23, 10, 32, 317, DateTimeKind.Local).AddTicks(8690),
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HalfDay = true
                        },
                        new
                        {
                            Id = 3,
                            ApplicantId = "3fdeb990-62d4-41e7-90fc-fa213e9e6109",
                            Approved = true,
                            CreationDate = new DateTime(2024, 4, 11, 23, 10, 32, 317, DateTimeKind.Local).AddTicks(8692),
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HalfDay = true
                        });
                });

            modelBuilder.Entity("VacationManager.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "purviproekt",
                            Name = "ProektEdno"
                        },
                        new
                        {
                            Id = 2,
                            Description = "vtoriproekt",
                            Name = "ProektDve"
                        },
                        new
                        {
                            Id = 3,
                            Description = "tretiproekt",
                            Name = "ProektTri"
                        });
                });

            modelBuilder.Entity("VacationManager.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LeaderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaderID");

                    b.HasIndex("ProjectId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LeaderID = "a481ea6a-3ac1-4be7-a131-285be0bfc748",
                            Name = "OtborEdno",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            LeaderID = "a481ea6a-3ac1-4be7-a131-285be0bfc748",
                            Name = "OtborDve",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 3,
                            LeaderID = "a481ea6a-3ac1-4be7-a131-285be0bfc748",
                            Name = "OtborTri",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            LeaderID = "a481ea6a-3ac1-4be7-a131-285be0bfc748",
                            Name = "OtborChetiri",
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacationManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VacationManager.Data.Models.Leave", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("VacationManager.Data.Models.Team", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacationManager.Data.Models.Project", "Project")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Leader");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("VacationManager.Data.Models.Project", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
