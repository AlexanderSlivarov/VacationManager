// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VacationManager.Data;

#nullable disable

namespace VacationManager.Data.Migrations
{
    [DbContext(typeof(VacationManagerDbContext))]
    [Migration("20240411135949_Asd1")]
    partial class Asd1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VacationManager.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2cd61097-4e5b-421e-8ab5-7d2bf104b113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a0cac6f-cc73-4abf-9169-b4dbda404527",
                            EmailConfirmed = false,
                            FirstName = "Sasho",
                            LastName = "Manekena",
                            LockoutEnabled = false,
                            NormalizedUserName = "CEO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELw8IZ3tR/QM2K1XYH55CxbTBU3V9pBv3GceiWKXY6KulAX3jRzLyCYgP865XQRoqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eeaf02eb-78bb-4012-85d3-9088c8ccfb34",
                            TeamName = "ceotata",
                            TwoFactorEnabled = false,
                            UserName = "ceo@gmail.com"
                        },
                        new
                        {
                            Id = "2aa3379f-f6e8-4846-8d3b-de6a3fd59a4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec398dae-e42a-45a1-a822-9db0ee150fd4",
                            EmailConfirmed = false,
                            FirstName = "Marin",
                            LastName = "Pingvin",
                            LockoutEnabled = false,
                            NormalizedUserName = "DEVELOPER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJqlKh4rr0ANbxvoBCC22IVrOVmqEuq5Wh0QaDvmM2tjTBwtAfXcVnHtKKJ2v9bE2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d361de0-1ab6-46fe-b25d-c77217b1b892",
                            TeamName = "Developerite",
                            TwoFactorEnabled = false,
                            UserName = "developer@gmail.com"
                        },
                        new
                        {
                            Id = "bfdc4eb9-0b0e-4149-abe1-a1522e009617",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a97c85ce-fbcc-4a03-b36d-9c5f22427b10",
                            EmailConfirmed = false,
                            FirstName = "Steven",
                            LastName = "Rodgrigez",
                            LockoutEnabled = false,
                            NormalizedUserName = "TEAMLEAD@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFOngpJDXQPKy9T4S0yiymcO9JmLlA13+8EJ59znfLyqOh1G/RskwWgGEAtPlIYRTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "331b76e0-2b1f-4b74-b1ee-4fdf8c031e8a",
                            TeamName = "Leaderite",
                            TwoFactorEnabled = false,
                            UserName = "teamlead@gmail.com"
                        },
                        new
                        {
                            Id = "d2ccce78-3fc4-466b-9abc-95f83c5a1725",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3164e60-3b22-4c5b-8cbc-579584511911",
                            EmailConfirmed = false,
                            FirstName = "Jordan",
                            LastName = "Fugata",
                            LockoutEnabled = false,
                            NormalizedUserName = "UNASSIGNED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJo07gSpyQ5EmQ6OWtut94QevD0CVCyCzDByD7GekI2MQTFQ5RO0N0iHNnw24Rh3oQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6289a614-1a9c-4aa5-934f-0dad53bdf467",
                            TeamName = "Randomite",
                            TwoFactorEnabled = false,
                            UserName = "unassigned@gmail.com"
                        });
                });

            modelBuilder.Entity("VacationManager.Data.Models.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HalfDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantId = "d2ccce78-3fc4-466b-9abc-95f83c5a1725",
                            Approved = true,
                            CreationDate = new DateTime(2024, 4, 11, 16, 59, 49, 59, DateTimeKind.Local).AddTicks(1179),
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HalfDay = true
                        },
                        new
                        {
                            Id = 2,
                            ApplicantId = "d2ccce78-3fc4-466b-9abc-95f83c5a1725",
                            Approved = true,
                            CreationDate = new DateTime(2024, 4, 11, 16, 59, 49, 59, DateTimeKind.Local).AddTicks(1228),
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HalfDay = true
                        },
                        new
                        {
                            Id = 3,
                            ApplicantId = "d2ccce78-3fc4-466b-9abc-95f83c5a1725",
                            Approved = true,
                            CreationDate = new DateTime(2024, 4, 11, 16, 59, 49, 59, DateTimeKind.Local).AddTicks(1230),
                            DateFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HalfDay = true
                        });
                });

            modelBuilder.Entity("VacationManager.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "purviproekt",
                            Name = "ProektEdno"
                        },
                        new
                        {
                            Id = 2,
                            Description = "vtoriproekt",
                            Name = "ProektDve"
                        },
                        new
                        {
                            Id = 3,
                            Description = "tretiproekt",
                            Name = "ProektTri"
                        });
                });

            modelBuilder.Entity("VacationManager.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LeaderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaderID");

                    b.HasIndex("ProjectId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LeaderID = "bfdc4eb9-0b0e-4149-abe1-a1522e009617",
                            Name = "OtborEdno",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            LeaderID = "bfdc4eb9-0b0e-4149-abe1-a1522e009617",
                            Name = "OtborDve",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 3,
                            LeaderID = "bfdc4eb9-0b0e-4149-abe1-a1522e009617",
                            Name = "OtborTri",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            LeaderID = "bfdc4eb9-0b0e-4149-abe1-a1522e009617",
                            Name = "OtborChetiri",
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacationManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VacationManager.Data.Models.Leave", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("VacationManager.Data.Models.Team", b =>
                {
                    b.HasOne("VacationManager.Data.ApplicationUser", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacationManager.Data.Models.Project", "Project")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Leader");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("VacationManager.Data.Models.Project", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
